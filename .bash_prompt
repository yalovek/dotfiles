#!/usr/bin/env bash

# Shell prompt
if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
  export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1; then
  export TERM='xterm-256color';
fi;

prompt_git() {
  local s='';
  local branchName='';

  # Check if the current directory is in a Git repository.
  if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

    # check if the current directory is in .git before running git checks
    if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

      # Ensure the index is up to date.
      git update-index --really-refresh -q &>/dev/null;

      # Check for uncommitted changes in the index.
      if ! $(git diff --quiet --ignore-submodules --cached); then
        s+='+';
      fi;

      # Check for unstaged changes.
      if ! $(git diff-files --quiet --ignore-submodules --); then
        s+='!';
      fi;

      # Check for untracked files.
      if [ -n "$(git ls-files --others --exclude-standard)" ]; then
        s+='?';
      fi;

      # Check for stashed files.
      if $(git rev-parse --verify refs/stash &>/dev/null); then
        s+='$';
      fi;

    fi;

    # Get the short symbolic ref.
    # If HEAD isnâ€™t a symbolic ref, get the short SHA for the latest commit
    # Otherwise, just give up.
    branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
      git rev-parse --short HEAD 2> /dev/null || \
      echo '(unknown)')";

    [ -n "${s}" ] && s="[${s}]";

    echo -e "${1} ${branchName} ${2} ${s} ";
  else
    return;
  fi;
}

prompt_jobs() {
  if [[ $(jobs -p) ]]; then
    echo -e "${1}";
  fi;
}

reset_color="\[\e[0m\]";
bg_blue="\[\e[48;5;33m\]";
bg_green="\[\e[48;5;64m\]";
bg_red="\[\e[48;5;124m\]";
bg_orange="\[\e[48;5;166m\]";
bg_gray="\[\e[48;5;238m\]";
bg_light_gray="\[\e[48;5;240m\]";

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
  userStyle="$bg_red";
else
  userStyle="$bg_light_gray";
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
  hostStyle="$bg_orange";
else
  hostStyle="$bg_gray";
fi;

# Set the terminal title and prompt.
PS1="\[${userStyle}\] \u "; # username
PS1+="\[${hostStyle}\] \h "; # host
PS1+="$bg_blue \w "; # current working directory
PS1+="\$(prompt_git \"$bg_green\" \"$bg_orange\")"; # git repository details
PS1+="\$(prompt_jobs \"$bg_red \j \")"; # number of jobs currently managed by the shell
PS1+="$bg_gray \\$ $reset_color"; # $

export PS1;

PS2="$bg_light_gray > $reset_color";

export PS2;

